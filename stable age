import cv2
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.losses import MeanAbsoluteError
from collections import deque

# Load the trained model
model = load_model('age_gender_model3.keras', compile=False)
model.compile(
    optimizer='adam',
    loss={
        'gender_output': 'binary_crossentropy',
        'age_output': MeanAbsoluteError()
    },
    metrics={
        'gender_output': 'accuracy',
        'age_output': MeanAbsoluteError()
    }
)

# Load Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# For stabilizing predictions
age_history = {}
gender_history = {}
MAX_HISTORY = 10

def preprocess_face(face_img):
    face_img = cv2.resize(face_img, (64, 64))
    face_img = face_img.astype('float32') / 255.0
    return np.expand_dims(face_img, axis=0)

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame = cv2.flip(frame, 1)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    for idx, (x, y, w, h) in enumerate(faces):
        face_img = frame[y:y+h, x:x+w]
        input_img = preprocess_face(face_img)

        gender_pred_prob, age_pred = model.predict(input_img, verbose=0)
        gender_label = "Female" if gender_pred_prob[0][0] > 0.5 else "Male"
        age_value = int(age_pred[0][0])

        # Keep prediction history
        if idx not in age_history:
            age_history[idx] = deque(maxlen=MAX_HISTORY)
            gender_history[idx] = deque(maxlen=MAX_HISTORY)

        age_history[idx].append(age_value)
        gender_history[idx].append(gender_label)

        # Stable prediction
        stable_age = int(np.median(age_history[idx]))
        stable_gender = max(set(gender_history[idx]), key=gender_history[idx].count)

        text = f"{stable_gender}, Age: {stable_age}"
        (tw, th), _ = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2)
        cv2.rectangle(frame, (x, y - th - 10), (x + tw, y), (0, 255, 0), -1)
        cv2.putText(frame, text, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    cv2.imshow("Age & Gender Prediction (Stable)", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
